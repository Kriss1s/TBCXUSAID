export default class Carousel {
  constructor(element, options) {
    this.element = document.querySelector(element);
    this.slides = document.querySelectorAll('.slide');
    this.currentSlide = 0;
    this.slideInterval = null;
    this.prev = document.querySelector('.prev');
    this.next = document.querySelector('.next');
    this.indicators = document.querySelectorAll('.indicator');
    this.touchStartX = 0;
    this.touchEndX = 0;
    this.swipeThreshold = 50;

    this.options = {
      ...options,
      interval: options.interval || 3000,
    };
  }

  init() {
    this.createNavigation();
    this.autoSlide();
    this.setupSwipeEvents();
  }

  createNavigation() {
    this.prev.addEventListener('click', () => this.prevSlide());
    this.next.addEventListener('click', () => this.nextSlide());
    this.indicators.forEach(indicator => {
      indicator.addEventListener('click', () => {
        const slideNumber = parseInt(indicator.dataset.slideTo);
        this.currentSlide = slideNumber;
        this.goToSlide();
        this.autoSlide();
      });
    });
  }
  setupSwipeEvents() {
    this.element.addEventListener(
      'touchstart',
      this.handleTouchStart.bind(this)
    );
    this.element.addEventListener('touchend', this.handleTouchEnd.bind(this));
  }
  goToSlide() {
    this.slides.forEach((slide, index) => {
      slide.classList.remove('active');
      if (index === this.currentSlide) {
        slide.classList.add('active');
      }
    });
  }
  handleTouchStart(event) {
    this.touchStartX = event.touches[0].clientX;
  }

  handleTouchEnd(event) {
    this.touchEndX = event.changedTouches[0].clientX;
    const swipeDistance = this.touchStartX - this.touchEndX;

    if (Math.abs(swipeDistance) > this.swipeThreshold) {
      if (swipeDistance > 0) {
        this.prevSlide();
      } else {
        this.nextSlide();
      }
    }
  }
  nextSlide() {
    if (this.currentSlide === this.slides.length - 1) {
      this.currentSlide = 0;
    } else {
      this.currentSlide++;
    }
    this.goToSlide();
    this.autoSlide();
  }
  prevSlide() {
    if (this.currentSlide === 0) {
      this.currentSlide = this.slides.length - 1;
    } else {
      this.currentSlide--;
    }
    this.goToSlide(this.currentSlide);
    this.autoSlide();
  }
  autoSlide() {
    this.stopAutoSlide();
    this.slideInterval = setInterval(() => {
      this.nextSlide();
    }, this.options.interval);
  }

  stopAutoSlide() {
    clearInterval(this.slideInterval);
  }
}
